architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

loom {
    if (project.hasProperty("use_access_widener")) {
        accessWidenerPath = project(":common").loom.accessWidenerPath
    }
    if (project.hasProperty("use_mixin")) {
        mixin {
            defaultRefmapName = "mixins.${archives_base_name}_fabric.refmap.json"
        }
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    if (project.hasProperty("fabric_api_version")) {
        modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    }
    if (project.hasProperty("modmenu_version")) {
        modApi("maven.modrinth:modmenu:${modmenu_version}") {
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "net.fabricmc", module: "fabric-loader"
        }
    }
    if (project.hasProperty("cloth_config_version")) {
        modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
            exclude group: "net.fabricmc.fabric-api"
            exclude group: "net.fabricmc", module: "fabric-loader"
        }
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", mod_version

    filesMatching("fabric.mod.json") {
        expand "version": mod_version
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

afterEvaluate {
    loom.runs.configureEach {
        vmArg "-javaagent:${configurations.compileClasspath.find { it.name.contains("sponge-mixin") }}"
    }
}