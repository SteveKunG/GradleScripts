import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

architectury {
    minecraft = project.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "com.gradleup.shadow"
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "com.modrinth.minotaur"

    loom {
        silentMojangMappingsLicense()

        decompilers {
            vineflower {
                options.put("pll", "32767")
                options.put("ind", "    ")
            }
        }
    }

    repositories {
        maven {
            name "ParchmentMC"
            url "https://maven.parchmentmc.org"
            content {
                includeGroup "org.parchmentmc.data"
            }
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${parchmentmc_version}@zip")
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    base {
        archivesName = project.archives_base_name
    }

    version = project.mod_version
    group = project.maven_group

    ext {
        commonVmArgs = [
                "-XX:+AllowEnhancedClassRedefinition",
                "-XX:+IgnoreUnrecognizedVMOptions"
        ]

        hotswapVmArgs = [
                "-Dfabric.systemLibraries=${System.getProperty("java.home")}/lib/hotswap/hotswap-agent.jar".toString(),
                "-XX:HotswapAgent=fatjar"
        ]

        commonProperties = [
                "mixin.debug.export": "true",
                "mixin.hotSwap": "true"
        ]

        if (project.hasProperty("username") && project.hasProperty("uuid")) {
            usernameAndUUID = [
                    "--username",
                    "${username}".toString(),
                    "--uuid",
                    "${uuid}".toString()
            ]
        }
    }

    repositories {
        maven {
            name "CurseMaven"
            url "https://www.cursemaven.com/"
            content {
                includeGroup "curse.maven"
            }
        }
        maven {
            name "Modrinth Maven"
            url "https://api.modrinth.com/maven"
            content {
                includeGroup "maven.modrinth"
            }
        }
        maven {
            name "DevAuth"
            url "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1"
            content {
                includeGroup "me.djtheredstoner"
            }
        }
        maven {
            name "TerraformersMC"
            url "https://maven.terraformersmc.com/releases"
            content {
                includeGroup "com.terraformersmc"
            }
        }
    }

    tasks.withType(JavaCompile).tap {
        configureEach {
            options.encoding = "UTF-8"
            options.release = project.java_version as int
        }
    }

    java {
        withSourcesJar()

        sourceCompatibility = project.java_version
        targetCompatibility = project.java_version
    }
}

tasks.register("curseforgeModrinthFabric") {
    group "publishing"
    dependsOn ":fabric:modrinth"
    dependsOn ":fabric:curseforge"
}

tasks.register("curseforgeModrinthForge") {
    group "publishing"
    dependsOn ":forge:modrinth"
    dependsOn ":forge:curseforge"
}

tasks.register("curseforgeModrinthNeoForge") {
    group "publishing"
    dependsOn ":neoforge:modrinth"
    dependsOn ":neoforge:curseforge"
}

if (project.hasProperty("version_lib_dir")) {
    tasks.register("updateVersionLib") {
        group "publishing"
        def versionFile = file("${version_lib_dir}/${archives_base_name}.json")
        def jsonBuilder = new JsonBuilder(new JsonSlurper().parseText(versionFile.text))
        def jsonElement = jsonBuilder.content
        def formattedList = []

        jsonElement.promos."${minecraft_version}-latest" = project.mod_version
        jsonElement.promos."${minecraft_version}-recommended" = project.mod_version

        def reader = new BufferedReader(new FileReader(rootProject.file("CHANGE_LOG.md")))
        def currentLine
        for (int lineIndex = 0; (currentLine = reader.readLine()) != null; lineIndex++) {
            formattedList.add(currentLine)
        }

        if (jsonElement."${minecraft_version}" == null) {
            jsonElement."${minecraft_version}" = new JsonSlurper().parseText("{ \"${mod_version}\": \"\"}")
        }
        jsonElement."${minecraft_version}"."${mod_version}" = formattedList.join("\n")
        versionFile.text = jsonBuilder.toPrettyString()
    }
}