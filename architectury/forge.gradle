architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

sourceSets.main.resources {
    if (project.hasProperty("use_datagen")) {
        srcDir "src/generated/resources"
    }
}

loom {
    if (project.hasProperty("use_mixin")) {
        forge {
            mixinConfigs = ["mixins.${archives_base_name}.json", "mixins.${archives_base_name}_forge.json"]

            mixin {
                defaultRefmapName = "mixins.${archives_base_name}_forge.refmap.json"
            }
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project.hasProperty("cloth_config_version")) {
        modImplementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    }
    if (rootProject.hasProperty("devauth_version")) {
        modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${devauth_version}"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": mod_version
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

//TODO Waiting for https://github.com/SpongePowered/Mixin/issues/408 to be fixed
/*afterEvaluate {
    loom.runs.configureEach {
        vmArg "-javaagent:${configurations.compileClasspath.find { it.name.contains("mixin-patched") }}"
    }
}*/