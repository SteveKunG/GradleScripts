architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

sourceSets.main.resources {
    if (project.hasProperty("use_datagen")) {
        srcDir "src/generated/resources"
    }
}

loom {
    if (project.hasProperty("use_mixin")) {
        forge {
            mixinConfigs = ["mixins.${archives_base_name}.json", "mixins.${archives_base_name}_forge.json"]

            mixin {
                defaultRefmapName = "mixins.${archives_base_name}_forge.refmap.json"
            }
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project.hasProperty("cloth_config_version")) {
        modImplementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    }
    if (rootProject.hasProperty("devauth_version")) {
        modRuntimeOnly "me.djtheredstoner:DevAuth-forge-latest:${devauth_version}"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle(project(path: ":common", configuration: "transformProductionForge"))
}

processResources {
    inputs.property "version", mod_version

    filesMatching("META-INF/mods.toml") {
        expand "version": mod_version
    }
}

//TODO Waiting for https://github.com/SpongePowered/Mixin/issues/408 to be fixed
/*afterEvaluate {
    loom.runs.configureEach {
        vmArg "-javaagent:${configurations.compileClasspath.find { it.name.contains("mixin-patched") }}"
    }
}*/

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? curseforge_api_token : ""
    project {
        id = curseforge_project_id
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = release_type
        addGameVersion "Forge"
        addGameVersion minecraft_version

        if (project.hasProperty("curseforge_additional_game_versions") && !curseforge_additional_game_versions.isEmpty()) {
            curseforge_additional_game_versions.split(",").each {
                String gameVersion -> addGameVersion gameVersion
            }
        }

        mainArtifact(remapJar.archiveFile) {
            it.displayName = "[Forge ${minecraft_version}] ${display_name} v${mod_version}"
        }

        relations {
            if (project.hasProperty("curseforge_forge_required_dependencies") && !curseforge_forge_required_dependencies.isEmpty()) {
                curseforge_forge_required_dependencies.split(",").each {
                    String dep -> it.requiredDependency dep
                }
            }
            if (project.hasProperty("curseforge_forge_optional_dependencies") && !curseforge_forge_optional_dependencies.isEmpty()) {
                curseforge_forge_optional_dependencies.split(",").each {
                    String dep -> it.optionalDependency dep
                }
            }
        }

        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
    }
    options {
        debug = upload_debug.toBoolean()
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = upload_debug.toBoolean()
    token = project.hasProperty("modrinth_api_token") ? modrinth_api_token : ""
    projectId = modrinth_project_id
    changelog = rootProject.file("CHANGE_LOG.md").text
    syncBodyFrom = rootProject.file("README.md").text
    versionName = "[Forge ${minecraft_version}] ${display_name} v${mod_version}"
    versionNumber = mod_version + "-forge"
    versionType = release_type
    uploadFile = remapJar
    gameVersions = ["${minecraft_version}"]
    loaders = ["forge"]

    if (project.hasProperty("modrinth_additional_game_versions") && !modrinth_additional_game_versions.isEmpty()) {
        modrinth_additional_game_versions.split(",").each {
            gameVersions.add it
        }
    }
    if (project.hasProperty("modrinth_additional_loaders") && !modrinth_additional_loaders.isEmpty()) {
        modrinth_additional_loaders.split(",").each {
            loaders.add it
        }
    }

    dependencies {
        if (project.hasProperty("modrinth_forge_required_dependencies") && !modrinth_forge_required_dependencies.isEmpty()) {
            modrinth_forge_required_dependencies.split(",").each {
                required.project it
            }
        }
        if (project.hasProperty("modrinth_forge_optional_dependencies") && !modrinth_forge_optional_dependencies.isEmpty()) {
            modrinth_forge_optional_dependencies.split(",").each {
                optional.project it
            }
        }
    }
}