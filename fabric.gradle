java {
    sourceCompatibility = project.java_version
    targetCompatibility = project.java_version
}

base {
    archivesName = project.archives_base_name
}

ext {
    commonVmArgs = [
            "-XX:+AllowEnhancedClassRedefinition",
            "-XX:+IgnoreUnrecognizedVMOptions"
    ]

    hotswapVmArgs = [
            "-Dfabric.systemLibraries=${System.getProperty("java.home")}/lib/hotswap/hotswap-agent.jar".toString(),
            "-XX:HotswapAgent=fatjar"
    ]

    commonProperties = [
            "mixin.debug.export": "true",
            "mixin.hotSwap": "true"
    ]

    if (project.hasProperty("username") && project.hasProperty("uuid")) {
        usernameAndUUID = [
                "--username",
                "${username}".toString(),
                "--uuid",
                "${uuid}".toString()
        ]
    }
}

version = project.mod_version
group = project.maven_group

sourceSets.main.resources {
    if (project.hasProperty("use_datagen")) {
        srcDir "src/generated/resources"
    }
}

loom {
    decompilers {
        vineflower {
            options.put("pll", "32767")
            options.put("ind", "    ")
        }
    }
}

repositories {
    maven {
        name "ParchmentMC"
        url "https://maven.parchmentmc.org"
        content {
            includeGroup "org.parchmentmc.data"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchmentmc_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
}

jar {
    if (project.hasProperty("use_datagen")) {
        exclude ".cache"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = java_version as int
}

afterEvaluate {
    loom.runs.configureEach {
        vmArg "-javaagent:${configurations.compileClasspath.find { it.name.contains("sponge-mixin") }}"
    }
}