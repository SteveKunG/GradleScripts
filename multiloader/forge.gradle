minecraft {
    mappings channel: "parchment", version: parchmentmc_version.split(":")[1] + "-" + minecraft_version

    reobf = false
    copyIdeResources = true

    if (project.hasProperty("use_access_widener") && use_access_widener.toBoolean()) {
        accessTransformers = files("src/main/resources/META-INF/accesstransformer.cfg")
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    if (project.hasProperty("cloth_config_version")) {
        implementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    }
    if (rootProject.hasProperty("devauth_version")) {
        runtimeOnly "me.djtheredstoner:DevAuth-forge-latest:${devauth_version}"
    }
}

processResources {
    inputs.property("display_name", display_name)
    inputs.property("mod_id", mod_id)
    inputs.property("mod_description", mod_description)
    inputs.property("version", mod_version)

    def placeholders = [
            "display_name"   : display_name,
            "mod_id"         : mod_id,
            "mod_description": mod_description,
            "version"        : mod_version
    ]

    filesMatching(["META-INF/mods.toml"]) {
        expand placeholders
    }
}

afterEvaluate {
    minecraft.runs.configureEach {
        jvmArgs "-javaagent:${configurations.compileClasspath.find { it.name.contains("sponge-mixin") }}"
    }
}

sourceSets.main.resources {
    if (project.hasProperty("use_datagen") && use_datagen.toBoolean()) {
        srcDir "src/generated/resources"
    }
}

eclipse {
    synchronizationTasks "genEclipseRuns"
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? curseforge_api_token : ""
    project {
        id = curseforge_project_id
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = release_type
        addGameVersion "Forge"
        addGameVersion minecraft_version

        if (project.hasProperty("curseforge_additional_game_versions") && !curseforge_additional_game_versions.isEmpty()) {
            curseforge_additional_game_versions.split(",").each {
                String gameVersion -> addGameVersion gameVersion
            }
        }

        mainArtifact(jar.archiveFile) {
            it.displayName = "[Forge ${minecraft_version}] ${display_name} v${mod_version}"
        }

        if (project.hasProperty("curseforge_forge_required_dependencies") && !curseforge_forge_required_dependencies.isEmpty()
                || project.hasProperty("curseforge_forge_optional_dependencies") && !curseforge_forge_optional_dependencies.isEmpty()
                || project.hasProperty("curseforge_forge_embedded_dependencies") && !curseforge_forge_embedded_dependencies.isEmpty()
        ) {
            relations {
                if (project.hasProperty("curseforge_forge_required_dependencies") && !curseforge_forge_required_dependencies.isEmpty()) {
                    curseforge_forge_required_dependencies.split(",").each {
                        String dep -> it.requiredDependency dep
                    }
                }
                if (project.hasProperty("curseforge_forge_optional_dependencies") && !curseforge_forge_optional_dependencies.isEmpty()) {
                    curseforge_forge_optional_dependencies.split(",").each {
                        String dep -> it.optionalDependency dep
                    }
                }
                if (project.hasProperty("curseforge_forge_embedded_dependencies") && !curseforge_forge_embedded_dependencies.isEmpty()) {
                    curseforge_forge_embedded_dependencies.split(",").each {
                        String dep -> it.embeddedLibrary dep
                    }
                }
            }
        }

        afterEvaluate {
            uploadTask.dependsOn(jar)
        }
    }
    options {
        debug = upload_debug.toBoolean()
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = upload_debug.toBoolean()
    token = project.hasProperty("modrinth_api_token") ? modrinth_api_token : ""
    projectId = modrinth_project_id
    changelog = rootProject.file("CHANGE_LOG.md").text
    syncBodyFrom = rootProject.file("README.md").text
    versionName = "[Forge ${minecraft_version}] ${display_name} v${mod_version}"
    versionNumber = mod_version + "-forge"
    versionType = release_type
    uploadFile = jar
    gameVersions = ["${minecraft_version}"]
    loaders = ["forge"]

    if (project.hasProperty("modrinth_additional_game_versions") && !modrinth_additional_game_versions.isEmpty()) {
        modrinth_additional_game_versions.split(",").each {
            gameVersions.add it
        }
    }

    dependencies {
        if (project.hasProperty("modrinth_forge_required_dependencies") && !modrinth_forge_required_dependencies.isEmpty()) {
            modrinth_forge_required_dependencies.split(",").each {
                required.project it
            }
        }
        if (project.hasProperty("modrinth_forge_optional_dependencies") && !modrinth_forge_optional_dependencies.isEmpty()) {
            modrinth_forge_optional_dependencies.split(",").each {
                optional.project it
            }
        }
        if (project.hasProperty("modrinth_forge_embedded_dependencies") && !modrinth_forge_embedded_dependencies.isEmpty()) {
            modrinth_forge_embedded_dependencies.split(",").each {
                embedded.project it
            }
        }
    }
}